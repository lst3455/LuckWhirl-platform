# 命令执行 docker-compose -f docker-compose-environment-cloud.yml up -d
version: '3.9'
services:
  # 注册中心 https://github.com/nacos-group/nacos-docker - 其他配置可参考(集群)
  # http://127.0.0.1:8848/nacos 【账号：nacos 密码：nacos】
  # http://8.219.99.73:8848/nacos 【账号：nacos 密码：nacos】
  nacos:
    image: nacos/nacos-server:v2.2.3-slim
    container_name: nacos
    restart: always
    ports:
      - "8848:8848"
      - "9848:9848"
    environment:
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
      - SPRING_DATASOURCE_PLATFORM=mysql
      - MYSQL_SERVICE_HOST=mysql
      - MYSQL_SERVICE_DB_NAME=nacos-config
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_USER=root
      - MYSQL_SERVICE_PASSWORD=13860433455wabb!
      - MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
      - NACOS_AUTH_IDENTITY_KEY=2222
      - NACOS_AUTH_IDENTITY_VALUE=2xxx
      - NACOS_AUTH_TOKEN=SecretKey012345678901234567890123456789012345678901234567890123456789
    networks:
      - my-network
    depends_on:
      mysql:
        condition: service_healthy

  mysql:
    image: mysql:5.7
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password --log-bin=mysql-bin --server-id=1 --binlog-format=row --expire_logs_days=7
    restart: always
    environment:
      TZ: Asia/Singapore
      MYSQL_ROOT_PASSWORD: 13860433455wabb!
    networks:
      - my-network
    depends_on:
      - mysql-job-dbdata
    ports:
      - "13306:3306"
    volumes:
      - ./mysql/my.cnf:/etc/mysql/conf.d/mysql.cnf
      - ./mysql/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 15s
    volumes_from:
      - mysql-job-dbdata

  # 自动加载数据
  mysql-job-dbdata:
    image: alpine:3.18.2
    container_name: mysql-job-dbdata
    volumes:
      - /var/lib/mysql

  # phpmyadmin https://hub.docker.com/_/phpmyadmin
  phpmyadmin:
    image: phpmyadmin:5.2.1
    container_name: phpmyadmin
    hostname: phpmyadmin
    ports:
      - 8899:80
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - MYSQL_ROOT_PASSWORD=13860433455wabb!
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - my-network

  # Redis
  redis:
    image: redis:6.2
    container_name: redis
    restart: always
    hostname: redis
    privileged: true
    ports:
      - 16379:6379
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # RedisAdmin https://github.com/joeferner/redis-commander
  redis-admin:
    image: spryker/redis-commander:0.8.0
    container_name: redis-admin
    hostname: redis-commander
    restart: always
    ports:
      - 8081:8081
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=13860433455wabb!
      - LANG=C.UTF-8
      - LANGUAGE=C.UTF-8
      - LC_ALL=C.UTF-8
    networks:
      - my-network
    depends_on:
      redis:
        condition: service_healthy

  # rabbitmq
  # 账密 admin/admin
  # rabbitmq-plugins enable rabbitmq_management
  rabbitmq:
    image: rabbitmq:3.12.9
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: 13860433455wabb!
    command: rabbitmq-server
    volumes:
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins

  zookeeper:
    image: zookeeper:3.9.0
    container_name: zookeeper
    restart: always
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181
    networks:
      - my-network

#  # canal-server 伪装成mysql的从库
#  # docker cp canal-server:/home/admin/canal-server/conf/example/instance.properties /Users/xiaofuge/Documents/develop/github/xfg-studio/xfg-dev-tech-canal/docs/dev-ops/canal
#  canal-server:
#    image: canal/canal-server:v1.1.7
#    container_name: canal-server
#    restart: unless-stopped
#    ports:
#      - "11111:11111"
#    volumes:
#      - ./canal/instance.properties:/home/admin/canal-server/conf/example/instance.properties
#    depends_on:
#      - mysql
#    networks:
#      - my-network
#
#  # canal-adapter 负责数据分发
#  # docker cp canal-adapter:/opt/canal-adapter/conf/application.yml /Users/xiaofuge/Documents/develop/github/xfg-studio/xfg-dev-tech-canal/docs/dev-ops/canal-adapter
#  # docker cp canal-adapter:/opt/canal-adapter/conf/rdb/mytest_user.yml /Users/xiaofuge/Documents/develop/github/xfg-studio/xfg-dev-tech-canal/docs/dev-ops/canal-adapter/rdb
#  canal-adapter:
#    image: slpcat/canal-adapter:v1.1.5
#    container_name: canal-adapter
#    restart: unless-stopped
#    ports:
#      - "8082:8081"
#    volumes:
#      - ./canal-adapter/application.yml:/opt/canal-adapter/conf/application.yml
#      - ./canal-adapter/es7:/opt/canal-adapter/conf/es7
#    depends_on:
#      - canal-server
#    networks:
#      - my-network
#
#  elasticsearch:
#    image: elasticsearch:7.17.14
#    ports:
#      - '9200:9200'
#      - '9300:9300'
#    container_name: elasticsearch
#    restart: always
#    environment:
#      - 'cluster.name=elasticsearch' # 设置集群名称为elasticsearch
#      - 'discovery.type=single-node' # 以单一节点模式启动
#      - "cluster.name=docker-cluster" # 设置名称
#      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m' # 设置使用jvm内存大小
#    networks:
#      - my-network
#
#  kibana:
#    image: kibana:7.17.14
#    container_name: kibana
#    restart: always
#    volumes:
#      - /etc/localtime:/etc/localtime
#      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
#    ports:
#      - '5601:5601'
#    links:
#      - elasticsearch:es #可以用es这个域名访问elasticsearch服务
#    environment:
#      - ELASTICSEARCH_URL=http://elasticsearch:9200 #设置访问elasticsearch的地址
#      - 'elasticsearch.hosts=http://es:9200' #设置访问elasticsearch的地址
#      - I18N_LOCALE=en
#    networks:
#      - my-network
#    depends_on:
#      - elasticsearch


networks:
  my-network:
    driver: bridge
